$date
	Mon Dec 14 21:12:00 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mips_cpu_bus_tb $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " write $end
$var wire 32 # register_v0 [31:0] $end
$var wire 32 $ readdata [31:0] $end
$var wire 1 % read $end
$var wire 4 & byteenable [3:0] $end
$var wire 32 ' address [31:0] $end
$var wire 1 ( active $end
$var reg 1 ) clk $end
$var reg 1 * reset $end
$var reg 1 + waitrequest $end
$scope module cpuInst $end
$var wire 1 ) clk $end
$var wire 1 * reset $end
$var wire 1 + waitrequest $end
$var wire 32 , writedata [31:0] $end
$var wire 32 - register_v0 [31:0] $end
$var wire 32 . readdata [31:0] $end
$var wire 32 / instr_addr [31:0] $end
$var wire 1 0 data_write $end
$var wire 1 1 data_read_en $end
$var wire 32 2 data_addr [31:0] $end
$var wire 4 3 byteenable [3:0] $end
$var wire 1 ( active $end
$var reg 32 4 address [31:0] $end
$var reg 1 5 clk_enable $end
$var reg 32 6 data_addr_reg [31:0] $end
$var reg 32 7 data_read [31:0] $end
$var reg 32 8 data_reg [31:0] $end
$var reg 32 9 instr_addr_reg [31:0] $end
$var reg 32 : instr_read [31:0] $end
$var reg 32 ; instr_reg [31:0] $end
$var reg 2 < next_state [1:0] $end
$var reg 2 = prev_state [1:0] $end
$var reg 1 % read $end
$var reg 1 " write $end
$scope module harvard_cpu $end
$var wire 1 ) clk $end
$var wire 1 5 clk_enable $end
$var wire 32 > data_readdata [31:0] $end
$var wire 32 ? instr_readdata [31:0] $end
$var wire 1 * reset $end
$var wire 1 @ zero $end
$var wire 32 A register_v0 [31:0] $end
$var wire 32 B read_data_b [31:0] $end
$var wire 32 C read_data_a [31:0] $end
$var wire 1 D negative $end
$var wire 1 E equal $end
$var wire 32 F alu_result [31:0] $end
$var reg 1 ( active $end
$var reg 32 G alu_b [31:0] $end
$var reg 4 H alu_control [3:0] $end
$var reg 5 I alu_shift_amt [4:0] $end
$var reg 32 J data_address [31:0] $end
$var reg 4 K data_byteenable [3:0] $end
$var reg 1 1 data_read $end
$var reg 1 0 data_write $end
$var reg 32 L data_writedata [31:0] $end
$var reg 32 M hi_in [31:0] $end
$var reg 32 N hi_reg [31:0] $end
$var reg 32 O instr_address [31:0] $end
$var reg 32 P ir_reg [31:0] $end
$var reg 32 Q lo_in [31:0] $end
$var reg 32 R lo_reg [31:0] $end
$var reg 32 S pc_in [31:0] $end
$var reg 32 T pc_reg [31:0] $end
$var reg 64 U product [63:0] $end
$var reg 5 V regfile_write_addr [4:0] $end
$var reg 32 W regfile_write_data [31:0] $end
$var reg 1 X regfile_write_enable $end
$var reg 32 Y sign_extended_immediate [31:0] $end
$var reg 64 Z u_product [63:0] $end
$scope module alu $end
$var wire 32 [ alu_b [31:0] $end
$var wire 4 \ alu_control [3:0] $end
$var wire 5 ] alu_shift_amt [4:0] $end
$var wire 32 ^ alu_a [31:0] $end
$var reg 32 _ alu_out [31:0] $end
$var reg 1 E equal $end
$var reg 1 D negative $end
$var reg 1 @ zero $end
$upscope $end
$scope module reg_file $end
$var wire 1 ) clk $end
$var wire 1 5 clk_enable $end
$var wire 5 ` read_addr_a [4:0] $end
$var wire 5 a read_addr_b [4:0] $end
$var wire 5 b regfile_write_addr [4:0] $end
$var wire 32 c regfile_write_data [31:0] $end
$var wire 1 X regfile_write_enable $end
$var wire 1 * reset $end
$var reg 32 d read_data_a [31:0] $end
$var reg 32 e read_data_b [31:0] $end
$var reg 32 f register_v0 [31:0] $end
$var integer 32 g i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ramInst $end
$var wire 32 h address [31:0] $end
$var wire 4 i byteenable [3:0] $end
$var wire 1 ) clk $end
$var wire 1 % read $end
$var wire 1 + waitrequest $end
$var wire 1 " write $end
$var wire 32 j writedata [31:0] $end
$var reg 13 k mapped_address [12:0] $end
$var reg 32 l readdata [31:0] $end
$var reg 1 m write_clk_sync $end
$scope begin $unm_blk_1 $end
$var integer 32 n i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000000 n
xm
bx l
bx00 k
bx j
b1111 i
bx00 h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
b0 \
bx [
bx Z
bx Y
xX
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
b1111 K
bx00 J
bx I
b0 H
bx G
bx F
xE
xD
bx C
bx B
bx A
x@
bx ?
bx >
bx =
b11 <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
15
bx00 4
b1111 3
bx00 2
x1
x0
bx /
bx .
bx -
bx ,
0+
0*
0)
x(
bx00 '
b1111 &
0%
bx $
bx #
0"
bx !
$end
#10
b0 !
b0 ,
b0 L
b0 j
b0 Z
b0 U
0D
1@
b0 B
b0 e
b0 C
b0 ^
b0 d
b0 #
b0 -
b0 A
b0 f
1(
b11 =
1*
1)
#20
0)
#30
b0 W
b0 c
b0 2
b0 J
1E
b0 F
b0 _
b0 G
b0 [
b1010000000000 k
1+
05
b0 7
b0 >
1%
b10111111110000000000000000000000 '
b10111111110000000000000000000000 4
b10111111110000000000000000000000 h
b10 <
b0 `
b0 a
b111 H
b111 \
b0 Q
b0 M
b10111111110000000000000000000100 S
1X
b0 V
b0 b
b0 &
b0 3
b0 K
b0 i
01
00
b0 Z
b0 U
b0 I
b0 ]
b0 Y
b10111111110000000000000000000000 /
b10111111110000000000000000000000 O
0D
1@
b0 B
b0 e
b0 C
b0 ^
b0 d
0*
b0 6
b0 9
b0 8
b0 ;
b0 R
b0 N
b0 P
b10111111110000000000000000000000 T
b100000 g
1)
#40
0)
#50
1)
#55
b1011111100000000000000000011 :
b1011111100000000000000000011 ?
b1011111100000000000000000011 $
b1011111100000000000000000011 .
b1011111100000000000000000011 l
0m
0+
#60
0)
#70
b0 k
15
0%
b0 '
b0 4
b0 h
b11 <
b10 =
b1011111100000000000000000011 ;
b10111111110000000000000000000000 9
1)
#80
0)
#90
b11 W
b11 c
b1010000000100 k
1+
0E
b11 F
b11 _
05
1%
b10111111110000000000000000000100 '
b10111111110000000000000000000100 4
b10111111110000000000000000000100 h
b10 <
b11111 `
b10000 a
b10111111110000000000000000001100 S
b1111 &
b1111 3
b1111 K
b1111 i
b0 H
b0 \
0X
b10000 V
b10000 b
b11 G
b11 [
b11 Y
b10111111110000000000000000000100 /
b10111111110000000000000000000100 O
b1011111100000000000000000011 P
b10111111110000000000000000000100 T
b11 =
1)
#100
0)
#110
1)
#115
b100100010000100000000000000001 :
b100100010000100000000000000001 ?
b100100010000100000000000000001 $
b100100010000100000000000000001 .
b100100010000100000000000000001 l
0+
#120
0)
#130
b0 k
15
0%
b0 '
b0 4
b0 h
b11 <
b10 =
b100100010000100000000000000001 ;
b10111111110000000000000000000100 9
1)
#140
0)
#150
b1 W
b1 c
b1010000001100 k
1+
b1 F
b1 _
05
1%
b10111111110000000000000000001100 '
b10111111110000000000000000001100 4
b10111111110000000000000000001100 h
b10 <
b10 `
b10 a
b10111111110000000000000000010000 S
1X
b10 V
b10 b
b1 G
b1 [
b1 Y
b10111111110000000000000000001100 /
b10111111110000000000000000001100 O
b11 =
b100100010000100000000000000001 P
b10111111110000000000000000001100 T
1)
#160
0)
#170
1)
#175
b100100010000100000000000000011 :
b100100010000100000000000000011 ?
b100100010000100000000000000011 $
b100100010000100000000000000011 .
b100100010000100000000000000011 l
0+
#180
0)
#190
b0 k
15
0%
b0 '
b0 4
b0 h
b11 <
b10 =
b100100010000100000000000000011 ;
b10111111110000000000000000001100 9
1)
#200
0)
#210
b1010000010000 k
1+
b100 W
b100 c
b1 !
b1 ,
b1 L
b1 j
b1 Z
b1 U
b100 2
b100 J
05
1%
b10111111110000000000000000010000 '
b10111111110000000000000000010000 4
b10111111110000000000000000010000 h
b10 <
0@
b100 F
b100 _
b1 B
b1 e
b1 C
b1 ^
b1 d
b1 #
b1 -
b1 A
b1 f
b10111111110000000000000000010100 S
b11 G
b11 [
b11 Y
b10111111110000000000000000010000 /
b10111111110000000000000000010000 O
b100100010000100000000000000011 P
b10111111110000000000000000010000 T
b11 =
1)
#220
0)
#230
1)
#235
b1111100000001000 :
b1111100000001000 ?
b1111100000001000 $
b1111100000001000 .
b1111100000001000 l
0+
#240
0)
#250
b100 k
15
0%
b100 '
b100 4
b100 h
b11 <
b10 =
b1111100000001000 ;
b10111111110000000000000000010000 9
1)
#260
0)
#270
1@
b0 2
b0 J
b1010000010100 k
1+
1E
05
1%
b10111111110000000000000000010100 '
b10111111110000000000000000010100 4
b10111111110000000000000000010100 h
b10 <
b0 `
b0 a
b0 S
0X
b0 W
b0 c
b11111 V
b11111 b
b0 G
b0 [
b0 !
b0 ,
b0 L
b0 j
b0 &
b0 3
b0 K
b0 i
b0 Z
b0 U
b11111111111111111111100000001000 Y
b10111111110000000000000000010100 /
b10111111110000000000000000010100 O
b0 F
b0 _
b0 B
b0 e
b0 C
b0 ^
b0 d
b100 #
b100 -
b100 A
b100 f
b11 =
b1111100000001000 P
b10111111110000000000000000010100 T
1)
#280
0)
#290
1)
#295
b0 :
b0 ?
b0 $
b0 .
b0 l
0+
#300
0)
#310
b0 k
15
0%
b0 '
b0 4
b0 h
b11 <
b10 =
b0 ;
b10111111110000000000000000010100 9
1)
#320
0)
#330
1+
05
1%
b10 <
b111 H
b111 \
b100 S
b0 V
b0 b
b0 Y
b0 /
b0 O
0(
b0 P
b0 T
b11 =
1)
#340
0)
#350
1)
