$date
	Mon Dec 14 00:48:19 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mips_cpu_bus_tb $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " write $end
$var wire 32 # register_v0 [31:0] $end
$var wire 32 $ readdata [31:0] $end
$var wire 1 % read $end
$var wire 4 & byteenable [3:0] $end
$var wire 32 ' address [31:0] $end
$var wire 1 ( active $end
$var reg 1 ) clk $end
$var reg 1 * reset $end
$var reg 1 + waitrequest $end
$scope module cpuInst $end
$var wire 1 ) clk $end
$var wire 1 * reset $end
$var wire 1 + waitrequest $end
$var wire 32 , writedata [31:0] $end
$var wire 32 - register_v0 [31:0] $end
$var wire 32 . readdata [31:0] $end
$var wire 32 / instr_addr [31:0] $end
$var wire 1 0 data_write $end
$var wire 1 1 data_read_en $end
$var wire 32 2 data_addr [31:0] $end
$var wire 4 3 byteenable [3:0] $end
$var wire 1 ( active $end
$var reg 32 4 address [31:0] $end
$var reg 1 5 clk_enable $end
$var reg 32 6 data_addr_reg [31:0] $end
$var reg 32 7 data_read [31:0] $end
$var reg 32 8 data_reg [31:0] $end
$var reg 32 9 instr_addr_reg [31:0] $end
$var reg 32 : instr_read [31:0] $end
$var reg 32 ; instr_reg [31:0] $end
$var reg 2 < next_state [1:0] $end
$var reg 1 % read $end
$var reg 1 " write $end
$scope module harvard_cpu $end
$var wire 1 ) clk $end
$var wire 1 5 clk_enable $end
$var wire 32 = data_readdata [31:0] $end
$var wire 32 > instr_readdata [31:0] $end
$var wire 1 * reset $end
$var wire 1 ? zero $end
$var wire 32 @ register_v0 [31:0] $end
$var wire 32 A read_data_b [31:0] $end
$var wire 32 B read_data_a [31:0] $end
$var wire 1 C negative $end
$var wire 1 D equal $end
$var wire 32 E alu_result [31:0] $end
$var reg 1 ( active $end
$var reg 32 F alu_b [31:0] $end
$var reg 4 G alu_control [3:0] $end
$var reg 5 H alu_shift_amt [4:0] $end
$var reg 32 I data_address [31:0] $end
$var reg 4 J data_byteenable [3:0] $end
$var reg 1 1 data_read $end
$var reg 1 0 data_write $end
$var reg 32 K data_writedata [31:0] $end
$var reg 32 L hi_in [31:0] $end
$var reg 32 M hi_reg [31:0] $end
$var reg 32 N instr_address [31:0] $end
$var reg 32 O ir_reg [31:0] $end
$var reg 32 P lo_in [31:0] $end
$var reg 32 Q lo_reg [31:0] $end
$var reg 32 R pc_in [31:0] $end
$var reg 32 S pc_reg [31:0] $end
$var reg 64 T product [63:0] $end
$var reg 5 U regfile_write_addr [4:0] $end
$var reg 32 V regfile_write_data [31:0] $end
$var reg 1 W regfile_write_enable $end
$var reg 32 X sign_extended_immediate [31:0] $end
$var reg 64 Y u_product [63:0] $end
$scope module alu $end
$var wire 32 Z alu_b [31:0] $end
$var wire 4 [ alu_control [3:0] $end
$var wire 5 \ alu_shift_amt [4:0] $end
$var wire 32 ] alu_a [31:0] $end
$var reg 32 ^ alu_out [31:0] $end
$var reg 1 D equal $end
$var reg 1 C negative $end
$var reg 1 ? zero $end
$upscope $end
$scope module reg_file $end
$var wire 1 ) clk $end
$var wire 1 5 clk_enable $end
$var wire 5 _ read_addr_a [4:0] $end
$var wire 5 ` read_addr_b [4:0] $end
$var wire 5 a regfile_write_addr [4:0] $end
$var wire 32 b regfile_write_data [31:0] $end
$var wire 1 W regfile_write_enable $end
$var wire 1 * reset $end
$var reg 32 c read_data_a [31:0] $end
$var reg 32 d read_data_b [31:0] $end
$var reg 32 e register_v0 [31:0] $end
$var integer 32 f i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ramInst $end
$var wire 32 g address [31:0] $end
$var wire 4 h byteenable [3:0] $end
$var wire 1 ) clk $end
$var wire 1 % read $end
$var wire 1 + waitrequest $end
$var wire 1 " write $end
$var wire 32 i writedata [31:0] $end
$var reg 13 j mapped_address [12:0] $end
$var reg 32 k readdata [31:0] $end
$var reg 1 l write_clk_sync $end
$scope begin $unm_blk_1 $end
$var integer 32 m i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000000 m
xl
bx k
bx00 j
bx i
b1111 h
bx00 g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
b0 [
bx Z
bx Y
bx X
xW
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
b1111 J
bx00 I
bx H
b0 G
bx F
bx E
xD
xC
bx B
bx A
bx @
x?
bx >
bx =
b11 <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
15
bx00 4
b1111 3
bx00 2
x1
x0
bx /
bx .
bx -
bx ,
0+
0*
0)
x(
bx00 '
b1111 &
0%
bx $
bx #
0"
bx !
$end
#10
b0 !
b0 ,
b0 K
b0 i
b0 Y
b0 T
0C
1?
b0 A
b0 d
b0 B
b0 ]
b0 c
b0 #
b0 -
b0 @
b0 e
1(
1*
1)
#20
0)
#30
b0 V
b0 b
b0 2
b0 I
1D
b0 E
b0 ^
b0 F
b0 Z
b1010000000000 j
1+
05
b0 7
b0 =
1%
b10111111110000000000000000000000 '
b10111111110000000000000000000000 4
b10111111110000000000000000000000 g
b10 <
b0 _
b0 `
b111 G
b111 [
b0 P
b0 L
b10111111110000000000000000000100 R
1W
b0 U
b0 a
b0 &
b0 3
b0 J
b0 h
01
00
b0 Y
b0 T
b0 H
b0 \
b0 X
b10111111110000000000000000000000 /
b10111111110000000000000000000000 N
0C
1?
b0 A
b0 d
b0 B
b0 ]
b0 c
0*
b0 6
b0 9
b0 8
b0 ;
b0 Q
b0 M
b0 O
b10111111110000000000000000000000 S
b100000 f
1)
#40
0)
#50
1)
#55
b100100011000110000000001010000 :
b100100011000110000000001010000 >
b100100011000110000000001010000 $
b100100011000110000000001010000 .
b100100011000110000000001010000 k
0l
0+
#60
0)
#70
b0 j
15
0%
b0 '
b0 4
b0 g
b11 <
b100100011000110000000001010000 ;
b10111111110000000000000000000000 9
1)
#80
0)
#90
b1010000 V
b1010000 b
b1010000 2
b1010000 I
b1010000000100 j
1+
0D
b1010000 E
b1010000 ^
05
1%
b10111111110000000000000000000100 '
b10111111110000000000000000000100 4
b10111111110000000000000000000100 g
b10 <
b11 _
b11 `
b10111111110000000000000000001000 R
b1111 &
b1111 3
b1111 J
b1111 h
b0 G
b0 [
b11 U
b11 a
b1010000 F
b1010000 Z
b1 H
b1 \
b1010000 X
b10111111110000000000000000000100 /
b10111111110000000000000000000100 N
b100100011000110000000001010000 O
b10111111110000000000000000000100 S
1)
#100
0)
#110
1)
#115
b111000011000100000000000011110 :
b111000011000100000000000011110 >
b111000011000100000000000011110 $
b111000011000100000000000011110 .
b111000011000100000000000011110 k
0+
#120
0)
#130
b1010000 j
15
0%
b1010000 '
b1010000 4
b1010000 g
b11 <
b111000011000100000000000011110 ;
b10111111110000000000000000000100 9
1)
#140
0)
#150
b1010000001000 j
1+
05
1%
b10111111110000000000000000001000 '
b10111111110000000000000000001000 4
b10111111110000000000000000001000 g
b10 <
b10 `
b10111111110000000000000000001100 R
b1001110 V
b1001110 b
b0 !
b0 ,
b0 K
b0 i
b100 G
b100 [
b10 U
b10 a
b11110 F
b11110 Z
b0 Y
b0 T
b0 H
b0 \
b11110 X
b1001100 2
b1001100 I
b10111111110000000000000000001000 /
b10111111110000000000000000001000 N
0D
0?
b1001110 E
b1001110 ^
b0 A
b0 d
b1010000 B
b1010000 ]
b1010000 c
b111000011000100000000000011110 O
b10111111110000000000000000001000 S
1)
#160
0)
#170
1)
#175
b1111100000001000 :
b1111100000001000 >
b1111100000001000 $
b1111100000001000 .
b1111100000001000 k
0+
#180
0)
#190
b1001100 j
15
0%
b1001100 '
b1001100 4
b1001100 g
b11 <
b1111100000001000 ;
b10111111110000000000000000001000 9
1)
#200
0)
#210
b1010000001100 j
1+
b0 V
b0 b
b0 2
b0 I
05
1%
b10111111110000000000000000001100 '
b10111111110000000000000000001100 4
b10111111110000000000000000001100 g
b10 <
1D
1?
b0 E
b0 ^
b0 B
b0 ]
b0 c
b1001110 #
b1001110 -
b1001110 @
b1001110 e
b0 _
b0 `
b0 G
b0 [
b0 R
0W
b11111 U
b11111 a
b0 F
b0 Z
b0 &
b0 3
b0 J
b0 h
b11111111111111111111100000001000 X
b10111111110000000000000000001100 /
b10111111110000000000000000001100 N
b1111100000001000 O
b10111111110000000000000000001100 S
1)
#220
0)
#230
1)
#235
b0 :
b0 >
b0 $
b0 .
b0 k
0+
#240
0)
#250
b0 j
15
0%
b0 '
b0 4
b0 g
b11 <
b0 ;
b10111111110000000000000000001100 9
1)
#260
0)
#270
1+
05
1%
b10 <
b111 G
b111 [
b100 R
b0 U
b0 a
b0 X
b0 /
b0 N
0(
b0 O
b0 S
1)
#280
0)
#290
1)
